//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""DeleteMode"",
            ""id"": ""87661840-a2b7-4437-81e3-fab32aac5712"",
            ""actions"": [
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""7057116c-518d-4c04-a4a9-28e851b5833a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""884106c2-c65c-4187-a722-62d63b8833a6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""3d599512-1a96-4170-aee8-fc54e95ea652"",
            ""actions"": [
                {
                    ""name"": ""Build"",
                    ""type"": ""Button"",
                    ""id"": ""709369c1-312c-4d48-a7e5-bbeed8690b6f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1116bece-0389-4d98-88b5-6d0c7afe8f20"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DeleteMode
        m_DeleteMode = asset.FindActionMap("DeleteMode", throwIfNotFound: true);
        m_DeleteMode_Delete = m_DeleteMode.FindAction("Delete", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_Build = m_Building.FindAction("Build", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_DeleteMode.enabled, "This will cause a leak and performance issues, GameInput.DeleteMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Building.enabled, "This will cause a leak and performance issues, GameInput.Building.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DeleteMode
    private readonly InputActionMap m_DeleteMode;
    private List<IDeleteModeActions> m_DeleteModeActionsCallbackInterfaces = new List<IDeleteModeActions>();
    private readonly InputAction m_DeleteMode_Delete;
    public struct DeleteModeActions
    {
        private @GameInput m_Wrapper;
        public DeleteModeActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Delete => m_Wrapper.m_DeleteMode_Delete;
        public InputActionMap Get() { return m_Wrapper.m_DeleteMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeleteModeActions set) { return set.Get(); }
        public void AddCallbacks(IDeleteModeActions instance)
        {
            if (instance == null || m_Wrapper.m_DeleteModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DeleteModeActionsCallbackInterfaces.Add(instance);
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
        }

        private void UnregisterCallbacks(IDeleteModeActions instance)
        {
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
        }

        public void RemoveCallbacks(IDeleteModeActions instance)
        {
            if (m_Wrapper.m_DeleteModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDeleteModeActions instance)
        {
            foreach (var item in m_Wrapper.m_DeleteModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DeleteModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DeleteModeActions @DeleteMode => new DeleteModeActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private List<IBuildingActions> m_BuildingActionsCallbackInterfaces = new List<IBuildingActions>();
    private readonly InputAction m_Building_Build;
    public struct BuildingActions
    {
        private @GameInput m_Wrapper;
        public BuildingActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Build => m_Wrapper.m_Building_Build;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void AddCallbacks(IBuildingActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Add(instance);
            @Build.started += instance.OnBuild;
            @Build.performed += instance.OnBuild;
            @Build.canceled += instance.OnBuild;
        }

        private void UnregisterCallbacks(IBuildingActions instance)
        {
            @Build.started -= instance.OnBuild;
            @Build.performed -= instance.OnBuild;
            @Build.canceled -= instance.OnBuild;
        }

        public void RemoveCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildingActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildingActions @Building => new BuildingActions(this);
    public interface IDeleteModeActions
    {
        void OnDelete(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnBuild(InputAction.CallbackContext context);
    }
}
